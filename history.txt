Краткая история разработки программного комплекса SPF
======================================================

1.Начало - 28.XII.2014. Выбран пользовательский интерфейс SDI 
(однооконный) в системе Win'32.

2.Январь 2015 - выбран встроенный язык Lua 5.3, начата разработка
системного API.

3.Апрель/май 2015 - система б/м стабильна, начата разработка
реальных скриптов ("Бульдозер" и "Дихотомия"). Подана заявка
в РосПАТЕНТ.

4.Июнь/август 2015 (включая пребывание в Крыму) - получение 
результатов работы этих скриптов.

5.Осень 2015 - "ловля блох" в программе и осмысление результатов.
Получение свидетельства РосПАТЕНТА.

6.Апрель 2016 - доклад на конференции ПаВТ'2016 (Параллельные
вычислительные Технологии) в Архангельске, обдумывание направлений
усовершенствования системы (принято - учёт ГЕТЕРОГЕННОСТИ 
параллельног вычислительного поля).

7.Май 2016.  
-- Дополнение API с учётом ГЕТЕРОГЕННОСТИ (см. ранее).
-- Переход на MDI (два Win-окна: работы с Lua-скриптами и для вывода данных).
-- Размер фонтов (по умолчанию) в окнах увеличен до Arial 12 пт.

8).Весной-летом 2016 рассматривался вопрос применения для парсинга 
параметров вычислителей и операторов библиотеки PCRE версии 8.38 
(Copyright (c) 1997-2014 University of Cambridge); не забыть включить в 
проект файл PCRE.LIB и PCRE.H), размер EXE возростает примерно на 
50 kбайт. Пока решено отказаться от этого - есть причины; собственный 
парсер пока удовлетворяет требованиям (версия 3.65).

9).Август 2016 (Крым, Чокрак).
-- Скорректирована API-функция AddLineToTextFrame().
-- Длина строку в AddLineToTextFrame(), PutToProtol() и строки
w_str[] увеличены до 4096.
-- При априорной ВОЗМОЖНОСТИ выполнения данного оператора на данном 
вычислителе (или вообще нет ПАРАМЕТРОВ у вычислителя или оператора) или 
нет пересечения имён параметров API-функция CanExecOpCalc() вызвращает 
10^9 (т.е. условие ВЫПОЛНИМОСТИ всегда больше 0).
-- При старте приложения оно пытается загрузить файл скрипта из командной 
строки, при неудаче - из файла конфигурации, при неудаче экран редактора 
очищается и выдаётся информации о возможности создания нового скрипта.
-- Дополнено свойства окна редактирования Lua (но не окна вывода текстов) 
возможностью ВЫБОРА ФОНТОВ и ПОИСКА/ЗАМЕНЫ В ТЕКСТЕ (оба - кнопки сверху 
главного окна).
-- Стандартные расширения параметров вычислителей *.cls, операторов - 
*.ops, метрик дуг *.med, вершин - *.mvr (где * - обычно имя проекта). 
Выдача предупреждений о невозможности считывания этих файлов вызовами; 
при невозможности первоначального считывания данных из файлов calculators.cls,
operators.ops, m_edges.med, m_vertices.mvr предупреждения не выдаются.
-- Работа со СТАНДАРТНЫМИ расширениями: если расширение явно задано, то 
оставить его таковым; если явно не задано - добавить СТАНДАРТНОЕ.

10).Конец 2016 - решение проблемы произвольного масштабирования 
основного и дочЕрнего окон c сохранением и восстановлением в/из файла
конфигурации  (beta-решено в версии 3.7). 
-- Автоматическое выдвижение на передний план окна вывода данных в
начале выполнения Lua-скрипта.
-- вычисление и вывод CV=станд_откл/среднее для каждой ЯПФ.
-- При экспорте рассчитанных данных из текстового фрейма дочернего окна
в NotePad предлагается имя файла, совпадающее с именем файла информационного 
графа (файл EDG; ежели такой файл не считывался, то имя NO_NANE); сохранение
текстового файла должно осуществляться пользователем.

11).В начале февраля решены проблемы с некорректностью отрисовки графика
при изменении размера окна (версия 3.75 от 15.02.2017).

12).В марте 2017 введёно ключевое слово =Def: (значение по умолчанию) в 
параметры ВЫЧИСЛИТЕЛЕЙ, ОПЕРАТОРОВ, метрик ДУГ и ВЕРШИН.

13).В мае 2017 улучшена подсветка ключевых слов Lua и API в текстовом
редакторе (версия 3.8 от 01.05.2017), добавлена возможность задавать
метрики вершин (ОПЕРАТОРОВ) в зависимости от выполнения на заданных
ВЫЧИСЛИТЕЛЯХ.

14).В июле 2017 в качестве окна редактирования скриптов Lua применён
набор компонентов LMD_SyntaxEdit фирмы ©LMD Innovative 
(http://www.lmd.de).

15).В августе 2017 (Крым, Чокрак) выполнение Lua переведено в отдельный 
поток (нить, thread). При этом при любых некоррректностях при исполнении
Lua исключёна индикация исключений (обычно AV).                       

16).На основе опытов выяснено, что при двухпоточной работе регулярно
возникают AV (почти точно из-за "гонок" при доступе ко множеству
рабочих массивов программы). Т.к. этих массивов много, решено было
"не заморачиваться" с критиескими секциями etc и вернуться к
однопоточному режиму .

17).В состАв API системы SPF@home добавлены вызовы InputDialog, 
MessageDialog, RunSystemCommand (реально суть надстрОойки над Win-вызовами  
InputBox, СreateMessageDialog и System соответственно).

18).В начале сентября 2017 (Крым, Чокрак) задействована вЫгрузка файлов
с сервера SPF@home (использован компонент из набора Indy).

19).В мае 2018 в версии 4.00 полностью решена проблема корректной 
остановки выполнения (и возобновления с начала) Lua-скриптов (через 
setjmp/longjmp); AV не возникает.

20).Октябрь 2018 - для форматного вывода применена безопасная (в 
смысле использования длины строки вывода) функция vsnprintf c 
автоматическим увеличением длины строки при нехватке её).

21).Январь 2019, версия 4.1. Введена функция построения диаграммы 
времени жизни внутренних данных для данного ЯПФ (служит основой для 
последующего решения задачи о распределении данных по РОН внутри 
процессора).

22).Февраль 2019, версия 4.1.1. Вызовы CreateTiersByEdges() и 
CreateTiersByEdges_Bottom() теперь должны выполняться с именем 
ИГА-файла в качестве (единственного) формального параметра. Это 
решает проблему последовательности "ReadEdges(file1)->
CreateTiersByEdges()->ReadEdges(file2)", при которой нарушается 
логическая эквивалентность внутренних массивов Edges[][] и 
Tiers[][].

Внесены (формально - перехват ошибки посредством try/catch в 
StartLuaScript) изменения,  предотвращаюцие аварийные "падЕния" 
программы (по Access Violation). Подробный анализ не проводится, 
выдаётся только общее сообщение о некорректности синтаксиса Lua 
или API-вызовов.

Добавлена "ручная" функция "Получить параметры операторов" (F7) 
для выдачи в текстовое окно данных о заданном операторе 
(расположение, информационные зависимости, потенциал перемещения 
по ярусам).

23).Апрель 2019 года, версия 4.2. Добавлена обработка ошибок
времени выполнения Lua с трассировкой вызовов в случае ошибки 
(вызов "debug.traceback"), индикация строки с ошибкой.

24).Май 2019 - переход на стандарт файлов описания графа DOT
(используется *.GV вследствие "зАнятости" .DOT; см. 
https://ru.wikipedia.org/wiki/DOT_(%D1%8F%D0%B7%D1%8B%D0%BA).

25).Сентябрь 2019 - добавление асинхронной функции Lua-вызовов
посредством LuaCallByTimer. Реализована посредством lua_newthread
внутри основного состояния Lua.

26).Декабрь 2019 - информация о дугах ИГА представлена в виде
массива структур (учитываются комментарии в GV-файлах etc).

27).Сентябрь 2020 -  добавлена возможность получать информацию
о времени жизни локальных данных.

28).Март 2021 - добавлена возможность отказа от вычисления 
времени жизни данных при выводе на F2 (при больших графах 
сильно замедляет работу). 

29).Май 2021 (начало) - изменены (в сторону упрощения и
простотуы понимая) API-функции семейства c_GetCountXXX и 
c_GetNumbXXX (включая функцию c_GetCountOps).

           
* Размер выполняемого модуля 2831 кБайт 
(компиляция Release, Pentium, Word).


========================================================================


С уважением                                  Валерий Баканов


http://vbakanov.ru/left_1.htm

E-Mail: e881e@mail.ru, vbakanov@hse.ru











